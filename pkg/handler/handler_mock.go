// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// ChangeValue mocks base method.
func (m *MockRepositoryInterface) ChangeValue(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeValue indicates an expected call of ChangeValue.
func (mr *MockRepositoryInterfaceMockRecorder) ChangeValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeValue", reflect.TypeOf((*MockRepositoryInterface)(nil).ChangeValue), arg0, arg1)
}

// DeleteValue mocks base method.
func (m *MockRepositoryInterface) DeleteValue(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteValue indicates an expected call of DeleteValue.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValue", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteValue), arg0)
}

// GetByKey mocks base method.
func (m *MockRepositoryInterface) GetByKey(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByKey", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockRepositoryInterfaceMockRecorder) GetByKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockRepositoryInterface)(nil).GetByKey), arg0)
}

// InsertValue mocks base method.
func (m *MockRepositoryInterface) InsertValue(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertValue indicates an expected call of InsertValue.
func (mr *MockRepositoryInterfaceMockRecorder) InsertValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertValue", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertValue), arg0, arg1)
}
